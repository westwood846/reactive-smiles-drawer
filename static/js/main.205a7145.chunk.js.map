{"version":3,"sources":["Molecule.js","App.js","serviceWorker.js","index.js"],"names":["THEMES","material","C","O","N","F","CL","BR","I","P","S","B","SI","H","BACKGROUND","Molecule","props","componentDidMount","setImmediate","redraw","componentDidUpdate","lastInput","smiles","input","options","width","ref","current","parentNode","clientWidth","height","clientHeight","themes","compactDrawing","smilesDrawer","SmilesDrawer","Drawer","parse","tree","draw","error","onInputError","name","location","start","column","message","React","createRef","id","className","this","Component","App","handleInputChange","event","setState","target","value","undefined","handleInputError","render","type","state","onChange","href","rel","bind","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAGMA,EAAS,CACbC,SAAU,CACRC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,GAAI,UACJC,GAAI,UACJC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,EAAG,UACHC,GAAI,UACJC,EAAG,UACHC,WAAY,SAIKC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAKRC,kBAAoB,WAClBC,EAAa,kBAAM,EAAKC,YAPP,EAUnBC,mBAAqB,WACf,EAAKC,YAAc,EAAKL,MAAMM,QAAQ,EAAKH,UAX9B,EAcnBA,OAAS,WACP,IAAII,EAAQ,EAAKP,MAAMM,OACvB,EAAKD,UAAYE,EACjB,IAAIC,EAAU,CACZC,MAAO,EAAKC,IAAIC,QAAQC,WAAWC,YACnCC,OAAQ,EAAKJ,IAAIC,QAAQC,WAAWG,aAAe,GACnDC,OAAQhC,EACRiC,gBAAgB,GAGdC,EAAe,IAAIC,IAAaC,OAAOZ,GAE3CW,IAAaE,MAAMd,EAAO,SAACe,GACzBJ,EAAaK,KAAKD,EAAM,iBAAkB,YAAY,IACrD,SAACE,GACEA,GAAO,EAAKxB,MAAMyB,aAAX,UAA2BD,EAAME,KAAjC,oBAAiDF,EAAMG,SAASC,MAAMC,OAAtE,aAAiFL,EAAMM,aA3BpG,EAAKpB,IAAMqB,IAAMC,YACjB,EAAK3B,UAAY,EAAKL,MAAMM,OAHX,E,sEAkCjB,OACE,4BAAQ2B,GAAG,iBAAiBC,UAAU,WAAWxB,IAAKyB,KAAKzB,U,GApC3B0B,e,uPCqBvBC,E,YArCb,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRsC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZjC,MAAOgC,EAAME,OAAOC,MACpBlB,WAAOmB,KAfQ,EAmBnBC,iBAAmB,SAACd,GAClB,EAAKU,SAAS,CACZhB,MAAOM,KArBQ,EAyBnBe,OAAS,kBACP,yBAAKX,UAAU,4BACb,2BAAOY,KAAK,OAAOJ,MAAO,EAAKK,MAAMxC,MAAOyC,SAAU,EAAKV,oBAC1D,EAAKS,MAAMvB,OAAS,yBAAKU,UAAU,SAAQ,8BAAO,EAAKa,MAAMvB,QAC9D,yBAAKU,UAAU,eACb,kBAACnC,EAAA,EAAD,CAAUO,OAAQ,EAAKyC,MAAMxC,MAAOkB,aAAc,EAAKmB,oBAEzD,yBAAKV,UAAU,aAAf,YAAoC,uBAAGe,KAAK,6CAA6CR,OAAO,SAASS,IAAI,uBAAzE,iBAApC,cA7BF,EAAKH,MAAQ,CACXxC,MAAO,+BACPiB,WAAOmB,GAGT,EAAKL,kBAAoB,EAAKA,kBAAkBa,KAAvB,gBACzB,EAAKP,iBAAmB,EAAKA,iBAAiBO,KAAtB,gBATP,E,2BADHpB,IAAMK,WCQJgB,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCZNC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.205a7145.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport SmilesDrawer from 'smiles-drawer';\n\nconst THEMES = {\n  material: {\n    C: '#616161',\n    O: '#f44336',\n    N: '#2196f3',\n    F: '#4caf50',\n    CL: '#009688',\n    BR: '#FF5722',\n    I: '#9c27b0',\n    P: '#FF9800',\n    S: '#ffeb3b',\n    B: '#ffc107',\n    SI: '#afb42b',\n    H: '#00bcd4',\n    BACKGROUND: '#fff'\n  }\n}\n\nexport default class Molecule extends Component {\n  constructor(props) {\n    super(props)\n    this.ref = React.createRef();\n    this.lastInput = this.props.smiles;\n  }\n\n  componentDidMount = () => {\n    setImmediate(() => this.redraw());\n  }\n  \n  componentDidUpdate = () => {\n    if (this.lastInput !== this.props.smiles) this.redraw();\n  }\n\n  redraw = () => {\n    let input = this.props.smiles;\n    this.lastInput = input;\n    let options = {\n      width: this.ref.current.parentNode.clientWidth,\n      height: this.ref.current.parentNode.clientHeight - 13,\n      themes: THEMES,\n      compactDrawing: false,\n    };\n\n    let smilesDrawer = new SmilesDrawer.Drawer(options);\n    \n    SmilesDrawer.parse(input, (tree) => {\n      smilesDrawer.draw(tree, 'example-canvas', 'material', false);\n    }, (error) => {\n      if (error) this.props.onInputError(`${error.name} in col. ${error.location.start.column}: ${error.message}`);\n    });\n  }\n\n  render() {\n    return (\n      <canvas id=\"example-canvas\" className=\"Molecule\" ref={this.ref}/>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Molecule from './Molecule';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      input: \"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\",\n      error: undefined\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleInputError = this.handleInputError.bind(this);\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      input: event.target.value,\n      error: undefined\n    });\n  }\n\n  handleInputError = (message) => {\n    this.setState({\n      error: message\n    });\n  }\n  \n  render = () => (\n    <div className=\"App stretched-to-margins\">\n      <input type=\"text\" value={this.state.input} onChange={this.handleInputChange}/>\n      {this.state.error && <div className=\"error\"><code>{this.state.error}</code></div>}\n      <div className=\"flex-grow-1\">\n        <Molecule smiles={this.state.input} onInputError={this.handleInputError}/>\n      </div>\n      <div className=\"copyright\">Based on <a href=\"http://dx.doi.org/10.1021/acs.jcim.7b00425\" target=\"_blank\" rel=\"noopener noreferrer\">Smiles Drawer</a> library</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}